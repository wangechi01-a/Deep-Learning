{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f4722ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:43.510935Z",
     "iopub.status.busy": "2024-06-13T13:45:43.510475Z",
     "iopub.status.idle": "2024-06-13T13:45:46.164322Z",
     "shell.execute_reply": "2024-06-13T13:45:46.163217Z"
    },
    "papermill": {
     "duration": 2.667493,
     "end_time": "2024-06-13T13:45:46.167368",
     "exception": false,
     "start_time": "2024-06-13T13:45:43.499875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8727f54e",
   "metadata": {
    "papermill": {
     "duration": 0.008591,
     "end_time": "2024-06-13T13:45:46.185243",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.176652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb1c6288",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.203675Z",
     "iopub.status.busy": "2024-06-13T13:45:46.203052Z",
     "iopub.status.idle": "2024-06-13T13:45:46.260049Z",
     "shell.execute_reply": "2024-06-13T13:45:46.258790Z"
    },
    "papermill": {
     "duration": 0.069321,
     "end_time": "2024-06-13T13:45:46.262792",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.193471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1056</td>\n",
       "      <td>2</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2600</td>\n",
       "      <td>4</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1440</td>\n",
       "      <td>3</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1521</td>\n",
       "      <td>3</td>\n",
       "      <td>75.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area  bedrooms   price\n",
       "0  1056         2   39.07\n",
       "1  2600         4  120.00\n",
       "2  1440         3   62.00\n",
       "3  1521         3   75.00\n",
       "4  1200         2   51.00"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/homeprices-data/homeprices_banglore.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1a11518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.282105Z",
     "iopub.status.busy": "2024-06-13T13:45:46.281733Z",
     "iopub.status.idle": "2024-06-13T13:45:46.288953Z",
     "shell.execute_reply": "2024-06-13T13:45:46.287704Z"
    },
    "papermill": {
     "duration": 0.020229,
     "end_time": "2024-06-13T13:45:46.291894",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.271665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "18c4c4ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.311610Z",
     "iopub.status.busy": "2024-06-13T13:45:46.311095Z",
     "iopub.status.idle": "2024-06-13T13:45:46.337764Z",
     "shell.execute_reply": "2024-06-13T13:45:46.336256Z"
    },
    "papermill": {
     "duration": 0.039568,
     "end_time": "2024-06-13T13:45:46.340306",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.300738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20 entries, 0 to 19\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   area      20 non-null     int64  \n",
      " 1   bedrooms  20 non-null     int64  \n",
      " 2   price     20 non-null     float64\n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 608.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fec4530",
   "metadata": {
    "papermill": {
     "duration": 0.008626,
     "end_time": "2024-06-13T13:45:46.357894",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.349268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing/Scaling: Since our columns are on different scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "19cdd7d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.378022Z",
     "iopub.status.busy": "2024-06-13T13:45:46.377610Z",
     "iopub.status.idle": "2024-06-13T13:45:46.391238Z",
     "shell.execute_reply": "2024-06-13T13:45:46.390036Z"
    },
    "papermill": {
     "duration": 0.026987,
     "end_time": "2024-06-13T13:45:46.393965",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.366978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.08827586, 0.25      ],\n",
       "       [0.62068966, 0.75      ],\n",
       "       [0.22068966, 0.5       ],\n",
       "       [0.24862069, 0.5       ],\n",
       "       [0.13793103, 0.25      ],\n",
       "       [0.12758621, 0.25      ],\n",
       "       [0.6662069 , 0.75      ],\n",
       "       [0.86206897, 0.75      ],\n",
       "       [0.17586207, 0.5       ],\n",
       "       [1.        , 1.        ],\n",
       "       [0.34482759, 0.5       ],\n",
       "       [0.68448276, 0.75      ],\n",
       "       [0.06896552, 0.25      ],\n",
       "       [0.10344828, 0.25      ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.12931034, 0.25      ],\n",
       "       [0.13103448, 0.5       ],\n",
       "       [0.25517241, 0.5       ],\n",
       "       [0.67931034, 0.5       ],\n",
       "       [0.        , 0.        ]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sx = MinMaxScaler()\n",
    "sy = MinMaxScaler()\n",
    "\n",
    "scaled_X = sx.fit_transform(df.drop('price', axis = 1))\n",
    "scaled_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "653dce22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.414284Z",
     "iopub.status.busy": "2024-06-13T13:45:46.413878Z",
     "iopub.status.idle": "2024-06-13T13:45:46.423082Z",
     "shell.execute_reply": "2024-06-13T13:45:46.421980Z"
    },
    "papermill": {
     "duration": 0.022341,
     "end_time": "2024-06-13T13:45:46.425466",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.403125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.05237037],\n",
       "       [0.65185185],\n",
       "       [0.22222222],\n",
       "       [0.31851852],\n",
       "       [0.14074074],\n",
       "       [0.04444444],\n",
       "       [0.76296296],\n",
       "       [0.91111111],\n",
       "       [0.13333333],\n",
       "       [1.        ],\n",
       "       [0.37037037],\n",
       "       [0.8       ],\n",
       "       [0.04444444],\n",
       "       [0.05925926],\n",
       "       [0.51111111],\n",
       "       [0.07407407],\n",
       "       [0.11851852],\n",
       "       [0.20740741],\n",
       "       [0.51851852],\n",
       "       [0.        ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\n",
    "scaled_y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec458f1b",
   "metadata": {
    "papermill": {
     "duration": 0.008781,
     "end_time": "2024-06-13T13:45:46.443404",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.434623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- We should convert target column (i.e. price) into one dimensional array. It has become 2D due to scaling that we did above but now we should change to 1D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3e52a143",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.464596Z",
     "iopub.status.busy": "2024-06-13T13:45:46.463447Z",
     "iopub.status.idle": "2024-06-13T13:45:46.471647Z",
     "shell.execute_reply": "2024-06-13T13:45:46.470305Z"
    },
    "papermill": {
     "duration": 0.021766,
     "end_time": "2024-06-13T13:45:46.474178",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.452412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.05237037, 0.65185185, 0.22222222, 0.31851852, 0.14074074,\n",
       "       0.04444444, 0.76296296, 0.91111111, 0.13333333, 1.        ,\n",
       "       0.37037037, 0.8       , 0.04444444, 0.05925926, 0.51111111,\n",
       "       0.07407407, 0.11851852, 0.20740741, 0.51851852, 0.        ])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_y.reshape(20,)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c8550e8",
   "metadata": {
    "papermill": {
     "duration": 0.009204,
     "end_time": "2024-06-13T13:45:46.492693",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.483489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Implement Batch Gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f3b2260f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.514062Z",
     "iopub.status.busy": "2024-06-13T13:45:46.512762Z",
     "iopub.status.idle": "2024-06-13T13:45:46.546825Z",
     "shell.execute_reply": "2024-06-13T13:45:46.545598Z"
    },
    "papermill": {
     "duration": 0.048158,
     "end_time": "2024-06-13T13:45:46.550022",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.501864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights(w1,w2): [0.70712464 0.67456527]\n",
      "Bias: -0.23034857438407427\n",
      "Cost: 0.0068641890429808105\n"
     ]
    }
   ],
   "source": [
    "def batch_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n",
    "\n",
    "    number_of_features = X.shape[1]\n",
    "    # numpy array with 1 row and columns equal to number of features. In \n",
    "    # our case number_of_features = 2 (area, bedroom)\n",
    "    w = np.ones(shape=(number_of_features)) \n",
    "    b = 0\n",
    "    total_samples = X.shape[0] # number of rows in X\n",
    "    \n",
    "    cost_list = []\n",
    "    epoch_list = []\n",
    "    \n",
    "    for i in range(epochs):        \n",
    "        y_predicted = np.dot(w, X.T) + b\n",
    "\n",
    "        w_grad = -(2/total_samples)*(X.T.dot(y_true-y_predicted))\n",
    "        b_grad = -(2/total_samples)*np.sum(y_true-y_predicted)\n",
    "        \n",
    "        w = w - learning_rate * w_grad\n",
    "        b = b - learning_rate * b_grad\n",
    "        \n",
    "        cost = np.mean(np.square(y_true-y_predicted)) # MSE (Mean Squared Error)\n",
    "        \n",
    "        if i%10==0:\n",
    "            cost_list.append(cost)\n",
    "            epoch_list.append(i)\n",
    "        \n",
    "    return w, b, cost, cost_list, epoch_list\n",
    "\n",
    "w, b, cost, cost_list, epoch_list = batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)\n",
    "print(\"Weights(w1,w2):\", w)\n",
    "print(\"Bias:\", b)\n",
    "print(\"Cost:\", cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eb282e7",
   "metadata": {
    "papermill": {
     "duration": 0.009211,
     "end_time": "2024-06-13T13:45:46.568682",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.559471",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualization\n",
    "- Now plot epoch vs cost graph to see how cost reduces as number of epoch increases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cb97224a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.590430Z",
     "iopub.status.busy": "2024-06-13T13:45:46.589506Z",
     "iopub.status.idle": "2024-06-13T13:45:46.947527Z",
     "shell.execute_reply": "2024-06-13T13:45:46.946032Z"
    },
    "papermill": {
     "duration": 0.372287,
     "end_time": "2024-06-13T13:45:46.950194",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.577907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Showing Batch Gradient')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"epoch\")\n",
    "plt.ylabel(\"cost\")\n",
    "plt.plot(epoch_list,cost_list)\n",
    "plt.title(\"Showing Batch Gradient\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1d913380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:46.973306Z",
     "iopub.status.busy": "2024-06-13T13:45:46.972839Z",
     "iopub.status.idle": "2024-06-13T13:45:46.983739Z",
     "shell.execute_reply": "2024-06-13T13:45:46.982597Z"
    },
    "papermill": {
     "duration": 0.025723,
     "end_time": "2024-06-13T13:45:46.986223",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.960500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "128.45484403267596"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(area,bedrooms,w,b):\n",
    "    scaled_X = sx.transform([[area, bedrooms]])[0]\n",
    "    # here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b\n",
    "    # equation for price is w1*area + w2*bedrooms + w3*age + bias\n",
    "    # scaled_X[0] is area\n",
    "    # scaled_X[1] is bedrooms\n",
    "    # scaled_X[2] is age\n",
    "    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n",
    "    # once we get price prediction we need to to rescal it back to original value\n",
    "    # also since it returns 2D array, to get single value we need to do value[0][0]\n",
    "    return sy.inverse_transform([[scaled_price]])[0][0]\n",
    "\n",
    "predict(2600,4,w,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6c97449c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.009007Z",
     "iopub.status.busy": "2024-06-13T13:45:47.008542Z",
     "iopub.status.idle": "2024-06-13T13:45:47.016924Z",
     "shell.execute_reply": "2024-06-13T13:45:47.015708Z"
    },
    "papermill": {
     "duration": 0.023217,
     "end_time": "2024-06-13T13:45:47.019778",
     "exception": false,
     "start_time": "2024-06-13T13:45:46.996561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.253094462442355"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1000,2,w,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6fedc035",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.042897Z",
     "iopub.status.busy": "2024-06-13T13:45:47.042448Z",
     "iopub.status.idle": "2024-06-13T13:45:47.051502Z",
     "shell.execute_reply": "2024-06-13T13:45:47.050152Z"
    },
    "papermill": {
     "duration": 0.023623,
     "end_time": "2024-06-13T13:45:47.053986",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.030363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92.52111776810878"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(2200,3,w,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6af5692",
   "metadata": {
    "papermill": {
     "duration": 0.010142,
     "end_time": "2024-06-13T13:45:47.074820",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.064678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Implement Stochastic Gradient Descent\n",
    "- Stochastic GD will use randomly picked single training sample to calculate error and using this error we backpropage to adjust weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bb4e4558",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.098415Z",
     "iopub.status.busy": "2024-06-13T13:45:47.097974Z",
     "iopub.status.idle": "2024-06-13T13:45:47.105762Z",
     "shell.execute_reply": "2024-06-13T13:45:47.104592Z"
    },
    "papermill": {
     "duration": 0.023169,
     "end_time": "2024-06-13T13:45:47.108266",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.085097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we will use random libary to pick random training sample.\n",
    "# randit gives random number between two numbers specified in the argument\n",
    "import random\n",
    "random.randint(0,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e9c04ee4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.132357Z",
     "iopub.status.busy": "2024-06-13T13:45:47.131939Z",
     "iopub.status.idle": "2024-06-13T13:45:47.303841Z",
     "shell.execute_reply": "2024-06-13T13:45:47.302495Z"
    },
    "papermill": {
     "duration": 0.187774,
     "end_time": "2024-06-13T13:45:47.306745",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.118971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights(w1,w2): [0.70230573 0.67143423]\n",
      "Bias: -0.22744866458265106\n",
      "Final Cost: 0.00039819582961165016\n"
     ]
    }
   ],
   "source": [
    "def stochastic_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n",
    " \n",
    "    number_of_features = X.shape[1]\n",
    "    # numpy array with 1 row and columns equal to number of features. In \n",
    "    # our case number_of_features = 3 (area, bedroom and age)\n",
    "    w = np.ones(shape=(number_of_features)) \n",
    "    b = 0\n",
    "    total_samples = X.shape[0]\n",
    "    \n",
    "    cost_list = []\n",
    "    epoch_list = []\n",
    "    \n",
    "    for i in range(epochs):    \n",
    "        random_index = random.randint(0,total_samples-1) # random index from total samples\n",
    "        sample_x = X[random_index]\n",
    "        sample_y = y_true[random_index]\n",
    "        \n",
    "        y_predicted = np.dot(w, sample_x.T) + b\n",
    "    \n",
    "        w_grad = -(2/total_samples)*(sample_x.T.dot(sample_y-y_predicted))\n",
    "        b_grad = -(2/total_samples)*(sample_y-y_predicted)\n",
    "        \n",
    "        w = w - learning_rate * w_grad\n",
    "        b = b - learning_rate * b_grad\n",
    "        \n",
    "        cost = np.square(sample_y-y_predicted)\n",
    "        \n",
    "        if i%100==0: # at every 100th iteration record the cost and epoch value\n",
    "            cost_list.append(cost)\n",
    "            epoch_list.append(i)\n",
    "        \n",
    "    return w, b, cost, cost_list, epoch_list\n",
    "\n",
    "w_sgd, b_sgd, cost_sgd, cost_list_sgd, epoch_list_sgd = stochastic_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),10000)\n",
    "print(\"Weights(w1,w2):\", w_sgd)\n",
    "print(\"Bias:\",b_sgd)\n",
    "print(\"Final Cost:\", cost_sgd)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9b8a4db1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.331706Z",
     "iopub.status.busy": "2024-06-13T13:45:47.330728Z",
     "iopub.status.idle": "2024-06-13T13:45:47.338738Z",
     "shell.execute_reply": "2024-06-13T13:45:47.337554Z"
    },
    "papermill": {
     "duration": 0.022705,
     "end_time": "2024-06-13T13:45:47.341016",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.318311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.70712464, 0.67456527]), -0.23034857438407427, 0.0068641890429808105)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w,b,cost # Belonging to Batch Gradient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d4907752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.364500Z",
     "iopub.status.busy": "2024-06-13T13:45:47.364088Z",
     "iopub.status.idle": "2024-06-13T13:45:47.653785Z",
     "shell.execute_reply": "2024-06-13T13:45:47.652664Z"
    },
    "papermill": {
     "duration": 0.304488,
     "end_time": "2024-06-13T13:45:47.656267",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.351779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Showing SGD')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"epoch\")\n",
    "plt.ylabel(\"cost\")\n",
    "plt.plot(epoch_list_sgd,cost_list_sgd)\n",
    "plt.title(\"Showing SGD\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "86c1c7b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.682725Z",
     "iopub.status.busy": "2024-06-13T13:45:47.682224Z",
     "iopub.status.idle": "2024-06-13T13:45:47.690632Z",
     "shell.execute_reply": "2024-06-13T13:45:47.689501Z"
    },
    "papermill": {
     "duration": 0.024573,
     "end_time": "2024-06-13T13:45:47.693111",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.668538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79.30978365825084"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1800,3,w_sgd, b_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a9ae1572",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.718971Z",
     "iopub.status.busy": "2024-06-13T13:45:47.718458Z",
     "iopub.status.idle": "2024-06-13T13:45:47.727187Z",
     "shell.execute_reply": "2024-06-13T13:45:47.726037Z"
    },
    "papermill": {
     "duration": 0.02473,
     "end_time": "2024-06-13T13:45:47.729695",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.704965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.54010824505089"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1440,3,w_sgd, b_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1348a076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:45:47.756076Z",
     "iopub.status.busy": "2024-06-13T13:45:47.755621Z",
     "iopub.status.idle": "2024-06-13T13:45:47.768007Z",
     "shell.execute_reply": "2024-06-13T13:45:47.766923Z"
    },
    "papermill": {
     "duration": 0.028624,
     "end_time": "2024-06-13T13:45:47.770422",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.741798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1056</td>\n",
       "      <td>2</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2600</td>\n",
       "      <td>4</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1440</td>\n",
       "      <td>3</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1521</td>\n",
       "      <td>3</td>\n",
       "      <td>75.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area  bedrooms   price\n",
       "0  1056         2   39.07\n",
       "1  2600         4  120.00\n",
       "2  1440         3   62.00\n",
       "3  1521         3   75.00\n",
       "4  1200         2   51.00"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7dd432a",
   "metadata": {
    "papermill": {
     "duration": 0.012043,
     "end_time": "2024-06-13T13:45:47.795163",
     "exception": false,
     "start_time": "2024-06-13T13:45:47.783120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5205430,
     "sourceId": 8682842,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.96664,
   "end_time": "2024-06-13T13:45:48.430921",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-13T13:45:40.464281",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
