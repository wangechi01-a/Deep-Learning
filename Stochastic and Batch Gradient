{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7a5ccd5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:21.736648Z",
     "iopub.status.busy": "2024-06-13T13:44:21.736178Z",
     "iopub.status.idle": "2024-06-13T13:44:24.385638Z",
     "shell.execute_reply": "2024-06-13T13:44:24.384244Z"
    },
    "papermill": {
     "duration": 2.661815,
     "end_time": "2024-06-13T13:44:24.388609",
     "exception": false,
     "start_time": "2024-06-13T13:44:21.726794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8da5f5c7",
   "metadata": {
    "papermill": {
     "duration": 0.005893,
     "end_time": "2024-06-13T13:44:24.400871",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.394978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a50ca40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.416529Z",
     "iopub.status.busy": "2024-06-13T13:44:24.415970Z",
     "iopub.status.idle": "2024-06-13T13:44:24.451862Z",
     "shell.execute_reply": "2024-06-13T13:44:24.450704Z"
    },
    "papermill": {
     "duration": 0.047018,
     "end_time": "2024-06-13T13:44:24.454841",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.407823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1056</td>\n",
       "      <td>2</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2600</td>\n",
       "      <td>4</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1440</td>\n",
       "      <td>3</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1521</td>\n",
       "      <td>3</td>\n",
       "      <td>75.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area  bedrooms   price\n",
       "0  1056         2   39.07\n",
       "1  2600         4  120.00\n",
       "2  1440         3   62.00\n",
       "3  1521         3   75.00\n",
       "4  1200         2   51.00"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/homeprices-data/homeprices_banglore.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fbbf9056",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.469919Z",
     "iopub.status.busy": "2024-06-13T13:44:24.469516Z",
     "iopub.status.idle": "2024-06-13T13:44:24.476804Z",
     "shell.execute_reply": "2024-06-13T13:44:24.475630Z"
    },
    "papermill": {
     "duration": 0.017708,
     "end_time": "2024-06-13T13:44:24.479511",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.461803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "66ed06c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.494575Z",
     "iopub.status.busy": "2024-06-13T13:44:24.494148Z",
     "iopub.status.idle": "2024-06-13T13:44:24.522025Z",
     "shell.execute_reply": "2024-06-13T13:44:24.520500Z"
    },
    "papermill": {
     "duration": 0.038742,
     "end_time": "2024-06-13T13:44:24.525109",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.486367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20 entries, 0 to 19\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   area      20 non-null     int64  \n",
      " 1   bedrooms  20 non-null     int64  \n",
      " 2   price     20 non-null     float64\n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 608.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34f905c5",
   "metadata": {
    "papermill": {
     "duration": 0.006887,
     "end_time": "2024-06-13T13:44:24.538747",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.531860",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing/Scaling: Since our columns are on different scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eab272ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.554088Z",
     "iopub.status.busy": "2024-06-13T13:44:24.553712Z",
     "iopub.status.idle": "2024-06-13T13:44:24.567435Z",
     "shell.execute_reply": "2024-06-13T13:44:24.566069Z"
    },
    "papermill": {
     "duration": 0.025184,
     "end_time": "2024-06-13T13:44:24.570588",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.545404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.08827586, 0.25      ],\n",
       "       [0.62068966, 0.75      ],\n",
       "       [0.22068966, 0.5       ],\n",
       "       [0.24862069, 0.5       ],\n",
       "       [0.13793103, 0.25      ],\n",
       "       [0.12758621, 0.25      ],\n",
       "       [0.6662069 , 0.75      ],\n",
       "       [0.86206897, 0.75      ],\n",
       "       [0.17586207, 0.5       ],\n",
       "       [1.        , 1.        ],\n",
       "       [0.34482759, 0.5       ],\n",
       "       [0.68448276, 0.75      ],\n",
       "       [0.06896552, 0.25      ],\n",
       "       [0.10344828, 0.25      ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.12931034, 0.25      ],\n",
       "       [0.13103448, 0.5       ],\n",
       "       [0.25517241, 0.5       ],\n",
       "       [0.67931034, 0.5       ],\n",
       "       [0.        , 0.        ]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sx = MinMaxScaler()\n",
    "sy = MinMaxScaler()\n",
    "\n",
    "scaled_X = sx.fit_transform(df.drop('price', axis = 1))\n",
    "scaled_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e4356ca4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.586079Z",
     "iopub.status.busy": "2024-06-13T13:44:24.585706Z",
     "iopub.status.idle": "2024-06-13T13:44:24.595241Z",
     "shell.execute_reply": "2024-06-13T13:44:24.594083Z"
    },
    "papermill": {
     "duration": 0.020234,
     "end_time": "2024-06-13T13:44:24.597783",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.577549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.05237037],\n",
       "       [0.65185185],\n",
       "       [0.22222222],\n",
       "       [0.31851852],\n",
       "       [0.14074074],\n",
       "       [0.04444444],\n",
       "       [0.76296296],\n",
       "       [0.91111111],\n",
       "       [0.13333333],\n",
       "       [1.        ],\n",
       "       [0.37037037],\n",
       "       [0.8       ],\n",
       "       [0.04444444],\n",
       "       [0.05925926],\n",
       "       [0.51111111],\n",
       "       [0.07407407],\n",
       "       [0.11851852],\n",
       "       [0.20740741],\n",
       "       [0.51851852],\n",
       "       [0.        ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\n",
    "scaled_y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "807a46f5",
   "metadata": {
    "papermill": {
     "duration": 0.006454,
     "end_time": "2024-06-13T13:44:24.611130",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.604676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- We should convert target column (i.e. price) into one dimensional array. It has become 2D due to scaling that we did above but now we should change to 1D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c136990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.626469Z",
     "iopub.status.busy": "2024-06-13T13:44:24.626060Z",
     "iopub.status.idle": "2024-06-13T13:44:24.634438Z",
     "shell.execute_reply": "2024-06-13T13:44:24.633239Z"
    },
    "papermill": {
     "duration": 0.019353,
     "end_time": "2024-06-13T13:44:24.637180",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.617827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.05237037, 0.65185185, 0.22222222, 0.31851852, 0.14074074,\n",
       "       0.04444444, 0.76296296, 0.91111111, 0.13333333, 1.        ,\n",
       "       0.37037037, 0.8       , 0.04444444, 0.05925926, 0.51111111,\n",
       "       0.07407407, 0.11851852, 0.20740741, 0.51851852, 0.        ])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_y.reshape(20,)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277b2456",
   "metadata": {
    "papermill": {
     "duration": 0.006595,
     "end_time": "2024-06-13T13:44:24.650650",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.644055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Implement Batch Gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "98c5c7e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.666027Z",
     "iopub.status.busy": "2024-06-13T13:44:24.665644Z",
     "iopub.status.idle": "2024-06-13T13:44:24.699988Z",
     "shell.execute_reply": "2024-06-13T13:44:24.697760Z"
    },
    "papermill": {
     "duration": 0.046195,
     "end_time": "2024-06-13T13:44:24.703567",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.657372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights(w1,w2): [0.70712464 0.67456527]\n",
      "Bias: -0.23034857438407427\n",
      "Cost: 0.0068641890429808105\n"
     ]
    }
   ],
   "source": [
    "def batch_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n",
    "\n",
    "    number_of_features = X.shape[1]\n",
    "    # numpy array with 1 row and columns equal to number of features. In \n",
    "    # our case number_of_features = 2 (area, bedroom)\n",
    "    w = np.ones(shape=(number_of_features)) \n",
    "    b = 0\n",
    "    total_samples = X.shape[0] # number of rows in X\n",
    "    \n",
    "    cost_list = []\n",
    "    epoch_list = []\n",
    "    \n",
    "    for i in range(epochs):        \n",
    "        y_predicted = np.dot(w, X.T) + b\n",
    "\n",
    "        w_grad = -(2/total_samples)*(X.T.dot(y_true-y_predicted))\n",
    "        b_grad = -(2/total_samples)*np.sum(y_true-y_predicted)\n",
    "        \n",
    "        w = w - learning_rate * w_grad\n",
    "        b = b - learning_rate * b_grad\n",
    "        \n",
    "        cost = np.mean(np.square(y_true-y_predicted)) # MSE (Mean Squared Error)\n",
    "        \n",
    "        if i%10==0:\n",
    "            cost_list.append(cost)\n",
    "            epoch_list.append(i)\n",
    "        \n",
    "    return w, b, cost, cost_list, epoch_list\n",
    "\n",
    "w, b, cost, cost_list, epoch_list = batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)\n",
    "print(\"Weights(w1,w2):\", w)\n",
    "print(\"Bias:\", b)\n",
    "print(\"Cost:\", cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5986586",
   "metadata": {
    "papermill": {
     "duration": 0.006722,
     "end_time": "2024-06-13T13:44:24.717716",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.710994",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualization\n",
    "- Now plot epoch vs cost graph to see how cost reduces as number of epoch increases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ca04f603",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:24.734381Z",
     "iopub.status.busy": "2024-06-13T13:44:24.733985Z",
     "iopub.status.idle": "2024-06-13T13:44:25.066097Z",
     "shell.execute_reply": "2024-06-13T13:44:25.064790Z"
    },
    "papermill": {
     "duration": 0.343305,
     "end_time": "2024-06-13T13:44:25.068717",
     "exception": false,
     "start_time": "2024-06-13T13:44:24.725412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Showing Batch Gradient')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"epoch\")\n",
    "plt.ylabel(\"cost\")\n",
    "plt.plot(epoch_list,cost_list)\n",
    "plt.title(\"Showing Batch Gradient\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3aef86ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.085993Z",
     "iopub.status.busy": "2024-06-13T13:44:25.085630Z",
     "iopub.status.idle": "2024-06-13T13:44:25.095644Z",
     "shell.execute_reply": "2024-06-13T13:44:25.094472Z"
    },
    "papermill": {
     "duration": 0.021869,
     "end_time": "2024-06-13T13:44:25.098204",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.076335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "128.45484403267596"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(area,bedrooms,w,b):\n",
    "    scaled_X = sx.transform([[area, bedrooms]])[0]\n",
    "    # here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b\n",
    "    # equation for price is w1*area + w2*bedrooms + w3*age + bias\n",
    "    # scaled_X[0] is area\n",
    "    # scaled_X[1] is bedrooms\n",
    "    # scaled_X[2] is age\n",
    "    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n",
    "    # once we get price prediction we need to to rescal it back to original value\n",
    "    # also since it returns 2D array, to get single value we need to do value[0][0]\n",
    "    return sy.inverse_transform([[scaled_price]])[0][0]\n",
    "\n",
    "predict(2600,4,w,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "55fe5db4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.115183Z",
     "iopub.status.busy": "2024-06-13T13:44:25.114780Z",
     "iopub.status.idle": "2024-06-13T13:44:25.122843Z",
     "shell.execute_reply": "2024-06-13T13:44:25.121618Z"
    },
    "papermill": {
     "duration": 0.019379,
     "end_time": "2024-06-13T13:44:25.125096",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.105717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.253094462442355"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1000,2,w,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "833c41ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.143235Z",
     "iopub.status.busy": "2024-06-13T13:44:25.142809Z",
     "iopub.status.idle": "2024-06-13T13:44:25.150701Z",
     "shell.execute_reply": "2024-06-13T13:44:25.149235Z"
    },
    "papermill": {
     "duration": 0.020009,
     "end_time": "2024-06-13T13:44:25.153318",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.133309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92.52111776810878"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(2200,3,w,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70149aef",
   "metadata": {
    "papermill": {
     "duration": 0.00839,
     "end_time": "2024-06-13T13:44:25.169998",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.161608",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Implement Stochastic Gradient Descent\n",
    "- Stochastic GD will use randomly picked single training sample to calculate error and using this error we backpropage to adjust weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f6ed4626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.190245Z",
     "iopub.status.busy": "2024-06-13T13:44:25.189815Z",
     "iopub.status.idle": "2024-06-13T13:44:25.197886Z",
     "shell.execute_reply": "2024-06-13T13:44:25.196526Z"
    },
    "papermill": {
     "duration": 0.022382,
     "end_time": "2024-06-13T13:44:25.200289",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.177907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we will use random libary to pick random training sample.\n",
    "# randit gives random number between two numbers specified in the argument\n",
    "import random\n",
    "random.randint(0,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f37814d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.217678Z",
     "iopub.status.busy": "2024-06-13T13:44:25.217295Z",
     "iopub.status.idle": "2024-06-13T13:44:25.317001Z",
     "shell.execute_reply": "2024-06-13T13:44:25.315862Z"
    },
    "papermill": {
     "duration": 0.111521,
     "end_time": "2024-06-13T13:44:25.319738",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.208217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights(w1,w2): [0.7069803 0.6747824]\n",
      "Bias: -0.2315030115625751\n",
      "Final Cost: 0.0003034204835681727\n"
     ]
    }
   ],
   "source": [
    "def stochastic_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n",
    " \n",
    "    number_of_features = X.shape[1]\n",
    "    # numpy array with 1 row and columns equal to number of features. In \n",
    "    # our case number_of_features = 3 (area, bedroom and age)\n",
    "    w = np.ones(shape=(number_of_features)) \n",
    "    b = 0\n",
    "    total_samples = X.shape[0]\n",
    "    \n",
    "    cost_list = []\n",
    "    epoch_list = []\n",
    "    \n",
    "    for i in range(epochs):    \n",
    "        random_index = random.randint(0,total_samples-1) # random index from total samples\n",
    "        sample_x = X[random_index]\n",
    "        sample_y = y_true[random_index]\n",
    "        \n",
    "        y_predicted = np.dot(w, sample_x.T) + b\n",
    "    \n",
    "        w_grad = -(2/total_samples)*(sample_x.T.dot(sample_y-y_predicted))\n",
    "        b_grad = -(2/total_samples)*(sample_y-y_predicted)\n",
    "        \n",
    "        w = w - learning_rate * w_grad\n",
    "        b = b - learning_rate * b_grad\n",
    "        \n",
    "        cost = np.square(sample_y-y_predicted)\n",
    "        \n",
    "        if i%100==0: # at every 100th iteration record the cost and epoch value\n",
    "            cost_list.append(cost)\n",
    "            epoch_list.append(i)\n",
    "        \n",
    "    return w, b, cost, cost_list, epoch_list\n",
    "\n",
    "w_sgd, b_sgd, cost_sgd, cost_list_sgd, epoch_list_sgd = stochastic_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),10000)\n",
    "print(\"Weights(w1,w2):\", w_sgd)\n",
    "print(\"Bias:\",b_sgd)\n",
    "print(\"Final Cost:\", cost_sgd)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8a87b348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.337990Z",
     "iopub.status.busy": "2024-06-13T13:44:25.337587Z",
     "iopub.status.idle": "2024-06-13T13:44:25.345368Z",
     "shell.execute_reply": "2024-06-13T13:44:25.344258Z"
    },
    "papermill": {
     "duration": 0.020118,
     "end_time": "2024-06-13T13:44:25.347951",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.327833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.70712464, 0.67456527]), -0.23034857438407427, 0.0068641890429808105)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w,b,cost # Belonging to Batch Gradient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "94b120fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.366023Z",
     "iopub.status.busy": "2024-06-13T13:44:25.365622Z",
     "iopub.status.idle": "2024-06-13T13:44:25.645918Z",
     "shell.execute_reply": "2024-06-13T13:44:25.644609Z"
    },
    "papermill": {
     "duration": 0.292816,
     "end_time": "2024-06-13T13:44:25.648764",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.355948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Showing SGD')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"epoch\")\n",
    "plt.ylabel(\"cost\")\n",
    "plt.plot(epoch_list_sgd,cost_list_sgd)\n",
    "plt.title(\"Showing SGD\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "42d8692a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.668429Z",
     "iopub.status.busy": "2024-06-13T13:44:25.668009Z",
     "iopub.status.idle": "2024-06-13T13:44:25.675682Z",
     "shell.execute_reply": "2024-06-13T13:44:25.674630Z"
    },
    "papermill": {
     "duration": 0.020731,
     "end_time": "2024-06-13T13:44:25.678200",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.657469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79.20605746275847"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1800,3,w_sgd, b_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a6c9bc30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.697699Z",
     "iopub.status.busy": "2024-06-13T13:44:25.697298Z",
     "iopub.status.idle": "2024-06-13T13:44:25.705055Z",
     "shell.execute_reply": "2024-06-13T13:44:25.703976Z"
    },
    "papermill": {
     "duration": 0.020331,
     "end_time": "2024-06-13T13:44:25.707540",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.687209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.3580427032701"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(1440,3,w_sgd, b_sgd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "755ea753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-13T13:44:25.727923Z",
     "iopub.status.busy": "2024-06-13T13:44:25.727513Z",
     "iopub.status.idle": "2024-06-13T13:44:25.739391Z",
     "shell.execute_reply": "2024-06-13T13:44:25.738108Z"
    },
    "papermill": {
     "duration": 0.025155,
     "end_time": "2024-06-13T13:44:25.742260",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.717105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1056</td>\n",
       "      <td>2</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2600</td>\n",
       "      <td>4</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1440</td>\n",
       "      <td>3</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1521</td>\n",
       "      <td>3</td>\n",
       "      <td>75.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area  bedrooms   price\n",
       "0  1056         2   39.07\n",
       "1  2600         4  120.00\n",
       "2  1440         3   62.00\n",
       "3  1521         3   75.00\n",
       "4  1200         2   51.00"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d19b4d4d",
   "metadata": {
    "papermill": {
     "duration": 0.010286,
     "end_time": "2024-06-13T13:44:25.763011",
     "exception": false,
     "start_time": "2024-06-13T13:44:25.752725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5205430,
     "sourceId": 8682842,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.601906,
   "end_time": "2024-06-13T13:44:26.395651",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-13T13:44:18.793745",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
