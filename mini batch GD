{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8682842,"sourceType":"datasetVersion","datasetId":5205430}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings \nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:21:57.708364Z","iopub.execute_input":"2024-06-13T14:21:57.708853Z","iopub.status.idle":"2024-06-13T14:22:01.171106Z","shell.execute_reply.started":"2024-06-13T14:21:57.708815Z","shell.execute_reply":"2024-06-13T14:22:01.169814Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/homeprices-data/homeprices_banglore.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:22:30.478443Z","iopub.execute_input":"2024-06-13T14:22:30.478942Z","iopub.status.idle":"2024-06-13T14:22:30.519931Z","shell.execute_reply.started":"2024-06-13T14:22:30.478904Z","shell.execute_reply":"2024-06-13T14:22:30.518524Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   area  bedrooms   price\n0  1056         2   39.07\n1  2600         4  120.00\n2  1440         3   62.00\n3  1521         3   75.00\n4  1200         2   51.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>area</th>\n      <th>bedrooms</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1056</td>\n      <td>2</td>\n      <td>39.07</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2600</td>\n      <td>4</td>\n      <td>120.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1440</td>\n      <td>3</td>\n      <td>62.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1521</td>\n      <td>3</td>\n      <td>75.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1200</td>\n      <td>2</td>\n      <td>51.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:22:37.293851Z","iopub.execute_input":"2024-06-13T14:22:37.294240Z","iopub.status.idle":"2024-06-13T14:22:37.302037Z","shell.execute_reply.started":"2024-06-13T14:22:37.294212Z","shell.execute_reply":"2024-06-13T14:22:37.300670Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(20, 3)"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:22:39.562163Z","iopub.execute_input":"2024-06-13T14:22:39.562563Z","iopub.status.idle":"2024-06-13T14:22:39.594660Z","shell.execute_reply.started":"2024-06-13T14:22:39.562521Z","shell.execute_reply":"2024-06-13T14:22:39.592450Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20 entries, 0 to 19\nData columns (total 3 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   area      20 non-null     int64  \n 1   bedrooms  20 non-null     int64  \n 2   price     20 non-null     float64\ndtypes: float64(1), int64(2)\nmemory usage: 608.0 bytes\n","output_type":"stream"}]},{"cell_type":"code","source":"sx = MinMaxScaler()\nsy = MinMaxScaler()","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:23:21.657425Z","iopub.execute_input":"2024-06-13T14:23:21.658617Z","iopub.status.idle":"2024-06-13T14:23:21.663460Z","shell.execute_reply.started":"2024-06-13T14:23:21.658575Z","shell.execute_reply":"2024-06-13T14:23:21.662162Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"scaled_X = sx.fit_transform(df.drop('price', axis = 1))\nscaled_X","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:24:28.991119Z","iopub.execute_input":"2024-06-13T14:24:28.991995Z","iopub.status.idle":"2024-06-13T14:24:29.004848Z","shell.execute_reply.started":"2024-06-13T14:24:28.991956Z","shell.execute_reply":"2024-06-13T14:24:29.003644Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"array([[0.08827586, 0.25      ],\n       [0.62068966, 0.75      ],\n       [0.22068966, 0.5       ],\n       [0.24862069, 0.5       ],\n       [0.13793103, 0.25      ],\n       [0.12758621, 0.25      ],\n       [0.6662069 , 0.75      ],\n       [0.86206897, 0.75      ],\n       [0.17586207, 0.5       ],\n       [1.        , 1.        ],\n       [0.34482759, 0.5       ],\n       [0.68448276, 0.75      ],\n       [0.06896552, 0.25      ],\n       [0.10344828, 0.25      ],\n       [0.5       , 0.5       ],\n       [0.12931034, 0.25      ],\n       [0.13103448, 0.5       ],\n       [0.25517241, 0.5       ],\n       [0.67931034, 0.5       ],\n       [0.        , 0.        ]])"},"metadata":{}}]},{"cell_type":"code","source":"scaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\nscaled_y","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:24:42.112469Z","iopub.execute_input":"2024-06-13T14:24:42.112916Z","iopub.status.idle":"2024-06-13T14:24:42.123871Z","shell.execute_reply.started":"2024-06-13T14:24:42.112884Z","shell.execute_reply":"2024-06-13T14:24:42.122090Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"array([[0.05237037],\n       [0.65185185],\n       [0.22222222],\n       [0.31851852],\n       [0.14074074],\n       [0.04444444],\n       [0.76296296],\n       [0.91111111],\n       [0.13333333],\n       [1.        ],\n       [0.37037037],\n       [0.8       ],\n       [0.04444444],\n       [0.05925926],\n       [0.51111111],\n       [0.07407407],\n       [0.11851852],\n       [0.20740741],\n       [0.51851852],\n       [0.        ]])"},"metadata":{}}]},{"cell_type":"code","source":"scaled_y.reshape(20,)","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:24:57.958669Z","iopub.execute_input":"2024-06-13T14:24:57.960099Z","iopub.status.idle":"2024-06-13T14:24:57.968555Z","shell.execute_reply.started":"2024-06-13T14:24:57.960055Z","shell.execute_reply":"2024-06-13T14:24:57.967166Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"array([0.05237037, 0.65185185, 0.22222222, 0.31851852, 0.14074074,\n       0.04444444, 0.76296296, 0.91111111, 0.13333333, 1.        ,\n       0.37037037, 0.8       , 0.04444444, 0.05925926, 0.51111111,\n       0.07407407, 0.11851852, 0.20740741, 0.51851852, 0.        ])"},"metadata":{}}]},{"cell_type":"markdown","source":"## Mini Batch Gradient Descent Imputation","metadata":{}},{"cell_type":"code","source":"np.random.permutation(20)","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:26:12.877785Z","iopub.execute_input":"2024-06-13T14:26:12.878183Z","iopub.status.idle":"2024-06-13T14:26:12.888588Z","shell.execute_reply.started":"2024-06-13T14:26:12.878156Z","shell.execute_reply":"2024-06-13T14:26:12.887390Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"array([19,  5,  3, 18, 17,  7,  6,  2, 12, 11, 16, 13,  1,  9,  4,  0,  8,\n       10, 14, 15])"},"metadata":{}}]},{"cell_type":"code","source":"def mini_batch_gradient_descent(X, y_true, epochs = 100, batch_size = 5, learning_rate = 0.01):\n    \n    number_of_features = X.shape[1]\n    # numpy array with 1 row and columns equal to number of features. In \n    # our case number_of_features = 3 (area, bedroom and age)\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0] # number of rows in X\n    \n    if batch_size > total_samples: # In this case mini batch becomes same as batch gradient descent\n        batch_size = total_samples\n        \n    cost_list = []\n    epoch_list = []\n    \n    num_batches = int(total_samples/batch_size)\n    \n    for i in range(epochs):    \n        random_indices = np.random.permutation(total_samples)\n        X_tmp = X[random_indices]\n        y_tmp = y_true[random_indices]\n        \n        for j in range(0,total_samples,batch_size):\n            Xj = X_tmp[j:j+batch_size]\n            yj = y_tmp[j:j+batch_size]\n            y_predicted = np.dot(w, Xj.T) + b\n            \n            w_grad = -(2/len(Xj))*(Xj.T.dot(yj-y_predicted))\n            b_grad = -(2/len(Xj))*np.sum(yj-y_predicted)\n            \n            w = w - learning_rate * w_grad\n            b = b - learning_rate * b_grad\n                \n            cost = np.mean(np.square(yj-y_predicted)) # MSE (Mean Squared Error)\n        \n        if i%10==0:\n            cost_list.append(cost)\n            epoch_list.append(i)\n        \n    return w, b, cost, cost_list, epoch_list\n\nw, b, cost, cost_list, epoch_list = mini_batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),epochs = 120, batch_size = 5)\nprint(\"Weights(w1,w2):\",w)\nprint(\"Bias:\",b)\nprint(\"Cost:\",cost)","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:29:08.641084Z","iopub.execute_input":"2024-06-13T14:29:08.642687Z","iopub.status.idle":"2024-06-13T14:29:08.688431Z","shell.execute_reply.started":"2024-06-13T14:29:08.642642Z","shell.execute_reply":"2024-06-13T14:29:08.686507Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Weights(w1,w2): [0.71010627 0.67813244]\nBias: -0.23332905089399208\nCost: 0.0018181988660900283\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list,cost_list)\nplt.title(\"A plot showing Mini Batch Gradient Descent\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:31:41.128153Z","iopub.execute_input":"2024-06-13T14:31:41.129854Z","iopub.status.idle":"2024-06-13T14:31:41.494376Z","shell.execute_reply.started":"2024-06-13T14:31:41.129801Z","shell.execute_reply":"2024-06-13T14:31:41.493202Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'A plot showing Mini Batch Gradient Descent')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"def predict(area,bedrooms,w,b):\n    scaled_X = sx.transform([[area, bedrooms]])[0]\n    # here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b\n    # equation for price is w1*area + w2*bedrooms + w3*age + bias\n    # scaled_X[0] is area\n    # scaled_X[1] is bedrooms\n    # scaled_X[2] is age\n    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n    # once we get price prediction we need to to rescal it back to original value\n    # also since it returns 2D array, to get single value we need to do value[0][0]\n    return sy.inverse_transform([[scaled_price]])[0][0]\n\npredict(2600,4,w,b)","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:32:23.572956Z","iopub.execute_input":"2024-06-13T14:32:23.573373Z","iopub.status.idle":"2024-06-13T14:32:23.586028Z","shell.execute_reply.started":"2024-06-13T14:32:23.573341Z","shell.execute_reply":"2024-06-13T14:32:23.583805Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"128.663495437403"},"metadata":{}}]},{"cell_type":"code","source":"predict(1521,3,w,b)","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:33:31.468838Z","iopub.execute_input":"2024-06-13T14:33:31.469215Z","iopub.status.idle":"2024-06-13T14:33:31.478861Z","shell.execute_reply.started":"2024-06-13T14:33:31.469187Z","shell.execute_reply":"2024-06-13T14:33:31.477513Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"70.10837753987231"},"metadata":{}}]},{"cell_type":"code","source":"df.sample()","metadata":{"execution":{"iopub.status.busy":"2024-06-13T14:33:19.501012Z","iopub.execute_input":"2024-06-13T14:33:19.501569Z","iopub.status.idle":"2024-06-13T14:33:19.515727Z","shell.execute_reply.started":"2024-06-13T14:33:19.501528Z","shell.execute_reply":"2024-06-13T14:33:19.514524Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   area  bedrooms  price\n3  1521         3   75.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>area</th>\n      <th>bedrooms</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>1521</td>\n      <td>3</td>\n      <td>75.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}